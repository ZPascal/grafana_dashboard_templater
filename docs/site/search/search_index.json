{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grafana Dashboard Templater The Grafana dashboard templater create a valid Grafana dashboard as dictionary based on a template and injected values. Dashboard template folder structure dashboard-templates <- Folder of the dashboard templates database <- Dashboard type postgresql <- Dashboard name v13 <- Dashboard version dashboard.json.sample <- Dashboard template Installation pip install grafana-dashboard-templater Example from grafana_dashboard.model import Model from grafana_dashboard.dashboard import Dashboard dashboard_model: Model = Model(dashboard_templates_path=\"./dashboard-templates\", dashboard_type=\"database\", dashboard_name=\"postgresql\", dashboard_version=\"v13\") dashboard: Dashboard = Dashboard(dashboard_model) dashboard_json = dashboard.get_dashboard_json(template_values={\"app_name\": \"PostgreSQL\", \"prometheus_name\": \"k8s-sonarqube-postgresql\"}) Grafana API SDK If you want to establish a connection to Grafana API via an SDK you can check out one of my other project and integrate the functionality inside your code.","title":"Home"},{"location":"#grafana-dashboard-templater","text":"The Grafana dashboard templater create a valid Grafana dashboard as dictionary based on a template and injected values.","title":"Grafana Dashboard Templater"},{"location":"#dashboard-template-folder-structure","text":"dashboard-templates <- Folder of the dashboard templates database <- Dashboard type postgresql <- Dashboard name v13 <- Dashboard version dashboard.json.sample <- Dashboard template","title":"Dashboard template folder structure"},{"location":"#installation","text":"pip install grafana-dashboard-templater","title":"Installation"},{"location":"#example","text":"from grafana_dashboard.model import Model from grafana_dashboard.dashboard import Dashboard dashboard_model: Model = Model(dashboard_templates_path=\"./dashboard-templates\", dashboard_type=\"database\", dashboard_name=\"postgresql\", dashboard_version=\"v13\") dashboard: Dashboard = Dashboard(dashboard_model) dashboard_json = dashboard.get_dashboard_json(template_values={\"app_name\": \"PostgreSQL\", \"prometheus_name\": \"k8s-sonarqube-postgresql\"})","title":"Example"},{"location":"#grafana-api-sdk","text":"If you want to establish a connection to Grafana API via an SDK you can check out one of my other project and integrate the functionality inside your code.","title":"Grafana API SDK"},{"location":"grafana_dashboard_templater/dashboard/","text":"Table of Contents grafana_dashboard.dashboard Dashboard get_dashboard_json grafana_dashboard.dashboard Dashboard Objects class Dashboard() The class includes all necessary methods to template the selected dashboard and return it as a dict Arguments : dashboard_model Model - Inject a dashboard object that includes all necessary values and information Attributes : dashboard_model Model - This is where we store the model logging logging.Logger - This is where we store the logger get_dashboard_json def get_dashboard_json(template_values: dict) -> dict The method includes a functionality to template the selected dashboard and return the corresponding dashboard as dictionary Arguments : template_values dict - Specify the inserted templating values as dict Raises : Exception - Unspecified error by executing the functionality Returns : json_dashboard dict - Returns the dashboard as dict","title":"Dashboard"},{"location":"grafana_dashboard_templater/dashboard/#table-of-contents","text":"grafana_dashboard.dashboard Dashboard get_dashboard_json","title":"Table of Contents"},{"location":"grafana_dashboard_templater/dashboard/#grafana_dashboarddashboard","text":"","title":"grafana_dashboard.dashboard"},{"location":"grafana_dashboard_templater/dashboard/#dashboard-objects","text":"class Dashboard() The class includes all necessary methods to template the selected dashboard and return it as a dict Arguments : dashboard_model Model - Inject a dashboard object that includes all necessary values and information Attributes : dashboard_model Model - This is where we store the model logging logging.Logger - This is where we store the logger","title":"Dashboard Objects"},{"location":"grafana_dashboard_templater/dashboard/#get_dashboard_json","text":"def get_dashboard_json(template_values: dict) -> dict The method includes a functionality to template the selected dashboard and return the corresponding dashboard as dictionary Arguments : template_values dict - Specify the inserted templating values as dict Raises : Exception - Unspecified error by executing the functionality Returns : json_dashboard dict - Returns the dashboard as dict","title":"get_dashboard_json"},{"location":"grafana_dashboard_templater/model/","text":"Table of Contents grafana_dashboard.model Model grafana_dashboard.model Model Objects class Model() The class includes all necessary variables to specify a query for the datasource search endpoint Arguments : dashboard_templates_path str - Specify the template path for all dashboard's (default None) dashboard_type str - Specify the dashboard type e.g. database (default None) dashboard_name str - Specify the dashboard name e.g. postgres (default None) dashboard_version str - Specify the dashboard version e.g. v13 (default None)","title":"Model"},{"location":"grafana_dashboard_templater/model/#table-of-contents","text":"grafana_dashboard.model Model","title":"Table of Contents"},{"location":"grafana_dashboard_templater/model/#grafana_dashboardmodel","text":"","title":"grafana_dashboard.model"},{"location":"grafana_dashboard_templater/model/#model-objects","text":"class Model() The class includes all necessary variables to specify a query for the datasource search endpoint Arguments : dashboard_templates_path str - Specify the template path for all dashboard's (default None) dashboard_type str - Specify the dashboard type e.g. database (default None) dashboard_name str - Specify the dashboard name e.g. postgres (default None) dashboard_version str - Specify the dashboard version e.g. v13 (default None)","title":"Model Objects"}]}